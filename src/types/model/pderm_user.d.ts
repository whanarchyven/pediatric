import * as mongoose from "mongoose";
declare const PdermUserSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}>> & mongoose.FlatRecord<{
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}> & {
    _id: mongoose.Types.ObjectId;
}>;
export declare const PdermUserRegTDto: import("@sinclair/typebox").TObject<{
    lastName: import("@sinclair/typebox").TString;
    firstName: import("@sinclair/typebox").TString;
    middleName: import("@sinclair/typebox").TString;
    phoneNumber: import("@sinclair/typebox").TString;
    specialty: import("@sinclair/typebox").TString;
    email: import("@sinclair/typebox").TString;
    city: import("@sinclair/typebox").TString;
    workplace: import("@sinclair/typebox").TString;
    position: import("@sinclair/typebox").TString;
    password: import("@sinclair/typebox").TString;
    confirmPassword: import("@sinclair/typebox").TString;
    joinCommunity: import("@sinclair/typebox").TBoolean;
}>;
export declare const PdermUserLoginTDto: import("@sinclair/typebox").TObject<{
    email: import("@sinclair/typebox").TString;
    password: import("@sinclair/typebox").TString;
}>;
export declare const PdermUserModel: mongoose.Model<{
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}> & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
} & {
    _id: mongoose.Types.ObjectId;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}>> & mongoose.FlatRecord<{
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    confirmPassword?: string | undefined;
}> & {
    _id: mongoose.Types.ObjectId;
}>>;
export type PdermUser = mongoose.InferSchemaType<typeof PdermUserSchema>;
export {};
