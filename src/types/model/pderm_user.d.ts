import * as mongoose from "mongoose";
declare const PdermUserSchema: mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}>> & mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}> & {
    _id: mongoose.Types.ObjectId;
}>;
export declare const PdermUserRegTDto: import("@sinclair/typebox").TObject<{
    lastName: import("@sinclair/typebox").TString;
    firstName: import("@sinclair/typebox").TString;
    middleName: import("@sinclair/typebox").TString;
    phoneNumber: import("@sinclair/typebox").TString;
    specialty: import("@sinclair/typebox").TString;
    email: import("@sinclair/typebox").TString;
    city: import("@sinclair/typebox").TString;
    workplace: import("@sinclair/typebox").TString;
    position: import("@sinclair/typebox").TString;
    password: import("@sinclair/typebox").TString;
    confirmPassword: import("@sinclair/typebox").TString;
    joinCommunity: import("@sinclair/typebox").TBoolean;
}>;
export declare const PdermUserSaveTDto: import("@sinclair/typebox").TObject<{
    title: import("@sinclair/typebox").TString;
    imageUrl: import("@sinclair/typebox").TString;
    href: import("@sinclair/typebox").TString;
    category: import("@sinclair/typebox").TString;
}>;
export declare const PdermUserSaveUndoTDto: import("@sinclair/typebox").TObject<{
    href: import("@sinclair/typebox").TString;
}>;
export declare const PdermEditUserRegTDto: import("@sinclair/typebox").TObject<{
    uuid: import("@sinclair/typebox").TString;
    lastName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    firstName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    middleName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    birthDate: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    email: import("@sinclair/typebox").TString;
    gender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    phoneNumber: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    specialty: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    city: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    workplace: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    position: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    password: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    confirmPassword: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    joinCommunity: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    photoUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    education: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        yearStart: import("@sinclair/typebox").TNumber;
        yearEnd: import("@sinclair/typebox").TNumber;
        university: import("@sinclair/typebox").TString;
        faculty: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        degree: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        diploma: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>>>;
    about: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    interests: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    saved: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        title: import("@sinclair/typebox").TString;
        imageUrl: import("@sinclair/typebox").TString;
        href: import("@sinclair/typebox").TString;
        category: import("@sinclair/typebox").TString;
    }>>>;
    career: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        monthStart: import("@sinclair/typebox").TString;
        yearStart: import("@sinclair/typebox").TNumber;
        monthEnd: import("@sinclair/typebox").TString;
        yearEnd: import("@sinclair/typebox").TNumber;
        place: import("@sinclair/typebox").TString;
        position: import("@sinclair/typebox").TString;
    }>>>;
}>;
export declare const PdermUserLoginTDto: import("@sinclair/typebox").TObject<{
    email: import("@sinclair/typebox").TString;
    password: import("@sinclair/typebox").TString;
}>;
export declare const PdermUserModel: mongoose.Model<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}> & {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
} & {
    _id: mongoose.Types.ObjectId;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    timestamps: true;
}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}>> & mongoose.FlatRecord<{
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    lastName: string;
    firstName: string;
    middleName: string;
    phoneNumber: string;
    specialty: string;
    email: string;
    city: string;
    workplace: string;
    position: string;
    password: string;
    joinCommunity: boolean;
    uuid: string;
    gender: string;
    education: any[];
    career: any[];
    saved: any[];
    confirmPassword?: string | undefined;
    fullNameNormalized?: string | undefined;
    birthDate?: string | undefined;
    about?: string | undefined;
    interests?: string | undefined;
    verificationCode?: string | undefined;
    photoUrl?: string | undefined;
}> & {
    _id: mongoose.Types.ObjectId;
}>>;
export type PdermUser = mongoose.InferSchemaType<typeof PdermUserSchema>;
export {};
